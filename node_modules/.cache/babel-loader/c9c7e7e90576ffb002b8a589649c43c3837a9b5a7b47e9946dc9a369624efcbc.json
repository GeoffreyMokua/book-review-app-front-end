{"ast":null,"code":"/**\n * React Router v6.0.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/api/MemoryRouter\n */\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/api/Navigate\n */\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/api/Outlet\n */\nfunction Outlet(_props) {\n  return useOutlet();\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/api/Route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/api/Router\n */\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (location == null) {\n    return null;\n  }\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/api/Routes\n */\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/api/useHref\n */\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/api/useInRouterContext\n */\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/api/useLocation\n */\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/api/useNavigationType\n */\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/api/useMatch\n */\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/api/useNavigate\n */\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/api/useOutlet\n */\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/api/useParams\n */\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/api/useResolvedPath\n */\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/api/useRoutes\n */\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/api/createRoutesFromChildren\n */\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/api/generatePath\n */\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/api/matchRoutes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch,\n// TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n    routes = route.children;\n  }\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/api/matchPath\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    :\n    // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/api/resolvePath\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(basename.length) || \"/\";\n}\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };","map":{"version":3,"names":["createContext","useRef","useState","useLayoutEffect","createElement","useContext","useEffect","useMemo","useCallback","Children","isValidElement","Fragment","createMemoryHistory","Action","parsePath","invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","env","NODE_ENV","NavigationContext","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","_ref","basename","children","initialEntries","initialIndex","historyRef","current","history","state","setState","action","location","listen","Router","navigationType","navigator","Navigate","_ref2","to","replace","useInRouterContext","static","navigate","useNavigate","Outlet","_props","useOutlet","Route","_ref3","basenameProp","locationProp","Pop","staticProp","normalizePathname","navigationContext","pathname","search","hash","trailingPathname","stripBasename","Provider","value","Routes","_ref4","useRoutes","createRoutesFromChildren","useHref","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","matchPath","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","options","go","path","resolveTo","parse","push","useParams","routeMatch","length","params","routes","locationArg","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","forEach","type","apply","props","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","routesArg","matchedParams","matchedPathname","end","renderMatches","reduceRight","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths","UNSAFE_LocationContext","UNSAFE_NavigationContext","UNSAFE_RouteContext"],"sources":["/Users/sylviaakothomolloh/Development/code/phase-4/book-review-app-front-end/node_modules/react-router/index.js"],"sourcesContent":["/**\n * React Router v6.0.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/api/MemoryRouter\n */\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/api/Navigate\n */\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/api/Outlet\n */\nfunction Outlet(_props) {\n  return useOutlet();\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/api/Route\n */\nfunction Route(_props) {\n   process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false) ;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/api/Router\n */\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/api/Routes\n */\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/api/useHref\n */\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/api/useInRouterContext\n */\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/api/useLocation\n */\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/api/useNavigationType\n */\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/api/useMatch\n */\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/api/useNavigate\n */\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/api/useOutlet\n */\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/api/useParams\n */\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/api/useResolvedPath\n */\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/api/useRoutes\n */\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/api/createRoutesFromChildren\n */\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/api/generatePath\n */\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/api/matchRoutes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, // TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children;\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/api/matchPath\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/api/resolvePath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };\n//# sourceMappingURL=index.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}